age_pyramid(data = ., age_group = "age", split_by = "Group",
count = "Percent", show_midpoint = FALSE) +
scale_fill_grey() +
theme_bw() +
labs(x="Age Group", y="Percent", fill=NULL,
title = "Percent Surveyed and Percent in Population by Age Group")
knitr::opts_chunk$set(echo = TRUE)
## Packages
library(knitr)
library(tidyverse)
library(plm)
library(readr)
library(readxl)
library(stargazer)
knitr::include_graphics("~images/image_4.png")
knitr::include_graphics("Images/image_4.png")
knitr::include_graphics("Images/image_5.jpg")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
load("~/GOVT8002/Spring 2024/Lab V/Ch10_lab_EgyptProtests.RData")
## Loading saved dataset
load("~/GOVT8002/Spring 2024/Lab V/Ch10_lab_EgyptProtests.RData")
## Removing NAs
dta <- dta[is.na(dta$just_binary_main)==0 & is.na(dta$not_acc_binary_main)==0,]
dep_vars <- dta %>%
dplyr::select(age_cat, male, education, sisi_vote, not_voteboycott, income)
b_test <- lapply(dep_vars, function(bal) {
lm(bal ~ dta$treat_b1 + dta$treat_b2 + dta$treat_b3)})
## Extracting Slopes and P Values
slopes  <- round(sapply(b_test, function(x) x$coefficients), 2)
p <- round(sapply(b_test, function(x) {
summary(x)$coefficients[,4]}), 2)
## Showing Results
balance_results = data.frame(b1= slopes[2,], b1.p = p[2,],
b2= slopes[3,], b2.p = p[3,],
b3= slopes[4,], b3.p = p[4,])
balance_results
summary(lm(dta$age_cat ~ dta$treat_b1 + dta$treat_b2 + dta$treat_b3))
balance_results
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
dataF <- data.frame("age" = c("18 to 29", "36 to 50", "51 to 64", "65+"),
"popPct" = c(29, 21, 30, 20),
"svyPct" = c(19, 21, 32, 28))
Age18to29 <- c(19, 29)
Age36to50 <- c(21,21)
Age51to64 <- c(32, 30)
Over65 <- c(28, 20)
age_groups <- cbind(Age18to29, Age36to50, Age51to64, Over65)
barplot(age_groups, beside=T, xlab="Age Group", names.arg=
c("18 - 29", "36 - 50", "51 - 64", "65+"), ylab="Percent",
main = "Percent Surveyed and Percent in Population by Age Group",
ylim = c(0,35), las=1)
legend("bottomleft",c("Surveyed %", "Population %"),
fill=c("black", "light gray"), horiz=FALSE, cex=0.73, bg="white")
dataDiff = data.frame(category = c("18 to 35", "36 to 50",
"51 to 64", "65+",
"Female", "Male",
"Black",
"No HS", "HS grad", "Some college",
"2 year college", "4 year college",
"Post-grad"))
dataDiff$diff = -1*c(28.8 - 19, 21.1-20.9, 29.8-31.8, 20.1 - 28.4,
50.8 - 47.3, 49.2 - 52.7,
11.8 - 8.9,
6.8 - 2.8, 30.6 - 19.7, 23 - 15.7, 10.6 - 11.3, 18.7 - 28.6, 10.4 - 21.9)
par(mfrow=c(1, 1), # mar(south, west, north, east)
mar=c(2., 0.25, 0.5,  0.5),
oma=c(1., 0.25, 0.5,  0.3))
plot(c(-16, 12), c(0.5, dim(dataDiff)[1]+1), type="n",
xlab = "", ylab = "", xaxt='n', yaxt='n',
bty = 'n')
axis(1, at = seq(-12, 12, by = 2),
labels = seq(-12, 12, by = 2), tick = T,
cex.axis = 1.0, mgp = c(2,.4,0))
mtext("Degree of misrepresentation",
side = 1, line = 1.75, at = 0,
cex = 1)
abline(v = 0, col = "grey")
text(9, dim(dataF)[1]+1, "Over-represented", cex = 0.9,
col = "darkgrey")
text(-10, dim(dataF)[1]+1, "Under-represented", cex = 0.9,
col = "darkgrey")
# Plot age group
points(dataDiff$diff[1:4], dim(dataDiff)[1]:(dim(dataDiff)[1]-3),
col = "darkblue", pch = 20, cex = 1.5)
lines(dataDiff$diff[1:4], dim(dataDiff)[1]:(dim(dataDiff)[1]-3),
col = "darkblue", lwd = 3)
for(aa in 1:4){
text(-14., dim(dataDiff)[1]-aa+1, dataDiff$category[aa], cex = 0.9,
col = "darkblue")
}
abline(h = dim(dataDiff)[1]-aa+0.5, col = "grey")
# Plot gender
points(dataDiff$diff[5:6], (dim(dataDiff)[1]-4):(dim(dataDiff)[1]-5),
col = "#cc6600", pch = 20, cex = 1.5)
lines(dataDiff$diff[5:6], (dim(dataDiff)[1]-4):(dim(dataDiff)[1]-5),
col = "#cc6600", lwd = 3)
for(aa in 5:6){
text(-14., dim(dataDiff)[1]-aa+1, dataDiff$category[aa], cex = 0.9,
col = "#cc6600")
}
abline(h = dim(dataDiff)[1]-aa+0.5, col = "grey")
# Plot race
points(dataDiff$diff[7], (dim(dataDiff)[1]-6):(dim(dataDiff)[1]-6),
col = "darkred", pch = 20, cex = 1.5)
lines(dataDiff$diff[7], (dim(dataDiff)[1]-6):(dim(dataDiff)[1]-6),
col = "darkred", lwd = 3)
for(aa in 7){
text(-14., dim(dataDiff)[1]-aa+1, dataDiff$category[aa], cex = 0.9,
col = "darkred")
}
abline(h = dim(dataDiff)[1]-aa+0.5, col = "grey")
# Plot education
points(dataDiff$diff[8:13], (dim(dataDiff)[1]-7):(dim(dataDiff)[1]-12),
col = "darkgreen", pch = 20, cex = 1.5)
lines(dataDiff$diff[8:13], (dim(dataDiff)[1]-7):(dim(dataDiff)[1]-12),
col = "darkgreen", lwd = 3)
for(aa in 8:13){
text(-14., dim(dataDiff)[1]-aa+1, dataDiff$category[aa], cex = 0.9,
col = "darkgreen")
}
df %>%
mutate(Population = popPct, Survey = svyPct) %>%
dplyr::select(-popPct, -svyPct) %>%
pivot_longer(-age, names_to="Group", values_to="Percent") %>%
ggplot(aes(x=age, y=Percent, fill=Group)) +
geom_bar(stat="identity", position="dodge") +
scale_fill_grey() +
theme_bw() +
labs(x = "Age Group", y = "Percent",
title = "Population and Survey Sample Proportions by Age Group")
df %>%
mutate(Population = popPct, Survey = svyPct) %>%
dplyr::select(-popPct, -svyPct) %>%
pivot_longer(-age, names_to="Group", values_to="Percent") %>%
ggplot(aes(x=age, y=Percent, fill=Group)) +
geom_bar(stat="identity", position="dodge") +
coord_flip() +
scale_fill_grey() +
theme_minimal() +
labs(x = "Age Group", y = "Percent",
title = "Population and Survey Sample Proportions by Age Group")
library(apyramid)
df %>%
mutate(Population = popPct, Survey = svyPct) %>%
dplyr::select(-popPct, -svyPct) %>%
pivot_longer(-age, names_to="Group", values_to="Percent") %>%
mutate(age = as.factor(age)) %>%
age_pyramid(data = ., age_group = "age", split_by = "Group",
count = "Percent", show_midpoint = FALSE) +
scale_fill_grey() +
theme_bw() +
labs(x="Age Group", y="Percent", fill=NULL,
title = "Percent Surveyed and Percent in Population by Age Group")
knitr::opts_chunk$set(echo = TRUE)
## Packages
library(knitr)
library(tidyverse)
library(plm)
library(readr)
library(readxl)
library(stargazer)
cbind(stk_$AAPL, daily_df$AAPL)[1:3,]
## Reading in stock data
stk <- read_csv("~/GOVT8002/Spring 2023/Lab VII/stocks2020.csv",  col_names = TRUE)
## Reading in presidential market data
pres_mkt <- read_excel("~/GOVT8002/Spring 2023/Lab VII/USPres_2020_Price History By Market -Bulk.xlsx",
col_names = TRUE) %>%
rename("date" = "Date (ET)",
"name" = "Contract Name",
"price" = "Close Share Price")
## Reading in stock data
stk <- read_csv("~/GOVT8002/Spring 2023/Lab VII/stocks2020.csv",  col_names = TRUE)
## Reading in presidential market data
pres_mkt <- read_excel("~/GOVT8002/Spring 2023/Lab VII/USPres_2020_Price History By Market -Bulk.xlsx",
col_names = TRUE) %>%
rename("date" = "Date (ET)",
"name" = "Contract Name",
"price" = "Close Share Price")
## Creating daily price data for Trump
trump2020 <- pres_mkt %>%
filter(year(date) > 2019 & name == "Donald Trump") %>%
dplyr::select(c(date, "Trump" = price))
## Joining the two datasets
stk_pres <- left_join(stk, trump2020, by = "date")
## Creating list of ticker names
stk_tickers <-
c(names(stk)[!names(stk) %in% c("date", "DJI")])
## Creating number of stocks
stk_num <- length(stk_tickers)
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
cbind(stk_pres$AAPL, daily_df$AAPL)[1:3,]
## Preparing Data Frame to store results
ols_results <- data.frame("row" = 1:stk_num,
"ticker" = NA,
"coef" = NA,
"se" = NA,
"tStat" = NA)
## Looping Though Regressions
for(i in 1:stk_num){
daily_df$temp <- unlist(daily_df[, i + 3])
ols.1 <- lm(temp ~ DJI + Trump, data = daily_df)
ols_results[i, "ticker"] <- stk_tickers[i]
ols_results[i, 3:5] <- round(summary(ols.1)$coefficients["Trump", 1:3], 3)
}
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
## Preparing Data Frame to store results
ols_results <- data.frame("row" = 1:stk_num,
"ticker" = NA,
"coef" = NA,
"se" = NA,
"tStat" = NA)
## Looping Though Regressions
for(i in 1:stk_num){
daily_df$temp <- unlist(daily_df[, i + 3])
ols.1 <- lm(temp ~ DJI + Trump, data = daily_df)
ols_results[i, "ticker"] <- stk_tickers[i]
ols_results[i, 3:5] <- round(summary(ols.1)$coefficients["Trump", 1:3], 3)
}
## Creating list of ticker names
stk_tickers <-
c(names(stk)[!names(stk) %in% c("date", "DJI")])
## Creating number of stocks
stk_num <- length(stk_tickers)
## Preparing Data Frame to store results
ols_results <- data.frame("row" = 1:stk_num,
"ticker" = NA,
"coef" = NA,
"se" = NA,
"tStat" = NA)
## Looping Though Regressions
for(i in 1:stk_num){
daily_df$temp <- unlist(daily_df[, i + 3])
ols.1 <- lm(temp ~ DJI + Trump, data = daily_df)
ols_results[i, "ticker"] <- stk_tickers[i]
ols_results[i, 3:5] <- round(summary(ols.1)$coefficients["Trump", 1:3], 3)
}
## Now with lapply()
ols_results2 <- lapply(stk_tickers, function(x){
daily_df$temp = unlist(daily_df[, which(names(daily_df) == x)])
ols.1 <- lm(temp ~ DJI + Trump, data = daily_df)
})
head(ols_results2)
## Now with lapply()
ols_results2 <- lapply(stk_tickers, function(x){
daily_df$temp = unlist(daily_df[, which(names(daily_df) == x)])
ols.1 <- lm(temp ~ DJI + Trump, data = daily_df)
})
head(ols_results2)
## Reading in stock data
stk <- read_csv("~/GOVT8002/Spring 2023/Lab VII/stocks2020.csv",  col_names = TRUE)
## Reading in presidential market data
pres_mkt <- read_excel("~/GOVT8002/Spring 2023/Lab VII/USPres_2020_Price History By Market -Bulk.xlsx",
col_names = TRUE) %>%
rename("date" = "Date (ET)",
"name" = "Contract Name",
"price" = "Close Share Price")
## Creating daily price data for Trump
trump2020 <- pres_mkt %>%
filter(year(date) > 2019 & name == "Donald Trump") %>%
dplyr::select(c(date, "Trump" = price))
## Joining the two datasets
stk_pres <- left_join(stk, trump2020, by = "date")
## Creating list of ticker names
stk_tickers <-
c(names(stk)[!names(stk) %in% c("date", "DJI")])
## Creating number of stocks
stk_num <- length(stk_tickers)
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
cbind(stk_pres$AAPL, daily_df$AAPL)[1:3,]
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
cbind(stk_pres$AAPL, daily_df$AAPL)[1:3,]
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
## Creating list of ticker names
stk_tickers <-
c(names(stk)[!names(stk) %in% c("date", "DJI")])
## Creating number of stocks
stk_num <- length(stk_tickers)
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
## Reading in stock data
stk <- read_csv("~/GOVT8002/Spring 2023/Lab VII/stocks2020.csv",  col_names = TRUE)
## Reading in presidential market data
pres_mkt <- read_excel("~/GOVT8002/Spring 2023/Lab VII/USPres_2020_Price History By Market -Bulk.xlsx",
col_names = TRUE) %>%
rename("date" = "Date (ET)",
"name" = "Contract Name",
"price" = "Close Share Price")
## Creating daily price data for Trump
trump2020 <- pres_mkt %>%
filter(year(date) > 2019 & name == "Donald Trump") %>%
dplyr::select(c(date, "Trump" = price))
## Joining the two datasets
stk_pres <- left_join(stk, trump2020, by = "date")
## Creating list of ticker names
stk_tickers <-
c(names(stk)[!names(stk) %in% c("date", "DJI")])
## Creating number of stocks
stk_num <- length(stk_tickers)
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
select(c(date, c("DJI", "Trump", stk_tickers)))
cbind(stk_pres$AAPL, daily_df$AAPL)[1:3,]
View(daily_df)
## Price Change Function
pct_change <- function(x){
(x - lag(x))/lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
dplyr::mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
dplyr::select(c(date, c("DJI", "Trump", stk_tickers)))
cbind(stk_pres$AAPL, daily_df$AAPL)[1:3,]
## Price Change Function
pct_change <- function(x){
(x - dplyr::lag(x))/dplyr::lag(x)
}
## Daily Change Dataset
daily_df <- stk_pres %>%
dplyr::mutate_at(c("DJI", "Trump", stk_tickers), pct_change) %>%
dplyr::select(c(date, c("DJI", "Trump", stk_tickers)))
cbind(stk_pres$AAPL, daily_df$AAPL)[1:3,]
## Preparing Data Frame to store results
ols_results <- data.frame("row" = 1:stk_num,
"ticker" = NA,
"coef" = NA,
"se" = NA,
"tStat" = NA)
## Looping Though Regressions
for(i in 1:stk_num){
daily_df$temp <- unlist(daily_df[, i + 3])
ols.1 <- lm(temp ~ DJI + Trump, data = daily_df)
ols_results[i, "ticker"] <- stk_tickers[i]
ols_results[i, 3:5] <- round(summary(ols.1)$coefficients["Trump", 1:3], 3)
}
## Showing results
head(ols_results)
## Now with lapply()
ols_results2 <- lapply(stk_tickers, function(x){
daily_df$temp = unlist(daily_df[, which(names(daily_df) == x)])
ols.1 <- lm(temp ~ DJI + Trump, data = daily_df)
})
head(ols_results2)
knitr::include_graphics("Images/image_6.jpg")
knitr::include_graphics("Images/image_6.jpg")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
## Reading in stock data
stk <- read_csv("~/GOVT8002/Spring 2023/Lab VII/stocks2020.csv",  col_names = TRUE)
## Reading in presidential market data
pres_mkt <- read_excel("~/GOVT8002/Spring 2023/Lab VII/USPres_2020_Price History By Market -Bulk.xlsx",
col_names = TRUE) %>%
rename("date" = "Date (ET)",
"name" = "Contract Name",
"price" = "Close Share Price")
## Reading in stock data
stk <- read_csv("~/GOVT8002/Spring 2023/Lab VII/stocks2020.csv",  col_names = TRUE)
## Reading in presidential market data
pres_mkt <- read_excel("~/GOVT8002/Spring 2023/Lab VII/USPres_2020_Price History By Market -Bulk.xlsx",
col_names = TRUE) %>%
dplyr::rename("date" = "Date (ET)",
"name" = "Contract Name",
"price" = "Close Share Price")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
## Load data
# https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36
cases <- read.csv("Data/United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv")
# Vax data
# "COVID-19 Vaccinations in the United States,Jurisdiction"
# https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-Jurisdi/unsk-b7fc
vax <- read.csv("Data/COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv")
df <- cases %>%
left_join(vax, by = c("submission_date" = "Date",
"state" = "Location"))
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::rename(trump2020Pct = trump2020_percent)
# %>% mutate(trump2020Pct = trump2020Pct)
df <- df %>%
filter(state %in% stFacts$stateAbbr == 1) %>%
left_join(stFacts, by = c("state" = "stateAbbr"))
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::mutate(trump2020Pct = trump2020Pct)
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::mutate(trump2020_pct = trump2020Pct)
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::rename(trump2020_pct = trump2020Pct)
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::rename("trump2020_pct" = trump2020Pct)
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::rename("trump2020Pct" = "trump2020_percent")
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::rename("trump2020Pct" = "trump2020_percent")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
View(stFacts)
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data")
View(stFacts)
## Load data
# https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36
cases <- read.csv("Data/United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv")
# Vax data
# "COVID-19 Vaccinations in the United States,Jurisdiction"
# https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-Jurisdi/unsk-b7fc
vax <- read.csv("Data/COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv")
df <- cases %>%
left_join(vax, by = c("submission_date" = "Date",
"state" = "Location"))
# Add state variables
stFacts <- read_excel("Data/USstates.xlsx", sheet = "data") %>%
dplyr::rename("trump2020Pct" = "trump2020_percent")
df <- df %>%
filter(state %in% stFacts$stateAbbr == 1) %>%
left_join(stFacts, by = c("state" = "stateAbbr"))
df <- df %>%
mutate("deathsPC" = 100000*new_death/pop2019,
"casesPC"  = 100000*new_case/pop2019,
"vaxedPct"  = Series_Complete_12PlusPop_Pct/100,
"density"   = pop2019/(1000000*sqMiles))
# Pick a day
DATE <- "10/18/2021"
df_day <- df %>%
filter(submission_date == DATE) %>%
arrange(desc(deathsPC))
# Look at data (check for negative deaths etc)
df_day %>%
dplyr::select(submission_date, state, new_case, new_death, deathsPC, casesPC) %>%
slice(1:5)
df_day %>%
summarize(meanVaxedPct = mean(vaxedPct),
meanDeath = mean(deathsPC),
minDeath = min(deathsPC),
maxDeath = max(deathsPC))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
getwd()
## Loading Data
hajj_public <- read_dta(here("Data", "hajj_public.dta"))
library(here) ## Importing Data
## Loading Data
hajj_public <- read_dta(here("Data", "hajj_public.dta"))
## Loading Data
hajj_public <- read_dta("Data/hajj_public.dta"))
## Loading Data
hajj_public <- read_dta("Data/hajj_public.dta")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
